<#+
// <copyright file="NonCachedMdmEntityLocatorFactoryTestsTemplate.tt" company="RWE">
//  Copyright © RWE. All Rights Reserved.
// </copyright>

public class NonCachedMdmEntityLocatorFactoryTestsTemplate : CSharpTemplate
{
	public string EntityName { get; set;}

	public override string TransformText()
	{
		base.TransformText();
#>
namespace MDM.Client.IntegrationTests.<#= EntityName #>.MdmEntityLocatorFactory
{
	using System.Configuration;
    using System.Linq;

    using Microsoft.VisualStudio.TestTools.UnitTesting;

    using RWEST.Nexus.MDM.Contracts;

    [TestClass]
    public class NonCachedMdmEntityLocatorFactoryTests : MdmEntityLocatorFactoryIntegrationTestBase
    {
        private <#= EntityName #> expected;

        protected override void OnSetup()
        {
			ConfigurationManager.AppSettings["MdmCaching"] = false.ToString();

            base.OnSetup();

            expected = <#= EntityName #>Data.PostBasicEntity();
        }

        [TestMethod]
        public void ShouldSuccessfullyLocateEntity()
        {
            // given
            var nexusId = expected.Identifiers.First(id => id.SystemName == "Nexus");

            // when
            var candidate = this.MdmEntityLocatorService.Get<<#= EntityName #>>(nexusId);

            // then
            this.Check(expected, candidate);
        }

        [TestMethod]
        public void ShouldReturnDefaultWhenUnableToLocateEntity()
        {
            // given
            var nexusId = new NexusId { SystemName = "Nexus", Identifier = "0" };

            // when
            var candidate = this.MdmEntityLocatorService.Get<<#= EntityName #>>(nexusId);

            // then
            Assert.AreEqual(default(<#= EntityName #>), candidate);
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
