<#+
// <copyright file="MdmServiceEntityRetrievalTestsTemplate.tt" company="RWE">
//  Copyright © RWE. All Rights Reserved.
// </copyright>

public class MdmServiceEntityRetrievalTestsTemplate : CSharpTemplate
{
	public string EntityName { get; set;}

	public override string TransformText()
	{
		base.TransformText();
#>
namespace MDM.Client.IntegrationTests.<#= EntityName #>.MdmService
{
	using System.Configuration;
    using System.Linq;
    using System.Net;

    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using RWEST.Nexus.MDM.Contracts;

    [TestClass]
    public class MdmServiceBasicIntegrationTests : MdmServiceIntegrationTestBase
    {
        private <#= EntityName #> <#= EntityName.ToLower() #>;

        protected override void OnSetup()
        {
			ConfigurationManager.AppSettings["MdmCaching"] = false.ToString();

            base.OnSetup();

            <#= EntityName.ToLower() #> = <#= EntityName #>Data.PostBasicEntity();
        }

        [TestMethod]
        public void ShouldGetByIntId()
        {
            // given
            var id = int.Parse(<#= EntityName.ToLower() #>.ToNexusId().Identifier);

            // when
            var response = MdmService.Get<<#= EntityName #>>(id);

            // then
            Assert.IsTrue(response.IsValid);
            Check(<#= EntityName.ToLower() #>, response.Message);
        }

        [TestMethod]
        public void ShouldGetByNexusId()
        {
            // given
            var nexusId = <#= EntityName.ToLower() #>.ToNexusId();

            // when
            var response = MdmService.Get<<#= EntityName #>>(nexusId);

            // then
            Assert.IsTrue(response.IsValid);
            Check(<#= EntityName.ToLower() #>, response.Message);
        }

        [TestMethod]
        public void ShouldGetMapping()
        {
            // given
            var id = int.Parse(<#= EntityName.ToLower() #>.ToNexusId().Identifier);

            // when
            var response = MdmService.GetMapping<<#= EntityName #>>(id, nexusId => nexusId.SystemName == "Endur");

            // then
            Assert.IsTrue(response.IsValid);
            Assert.AreEqual(<#= EntityName.ToLower() #>.Identifiers.First(i => i.SystemName == "Endur").Identifier, response.Message.Identifier);
        }

        [TestMethod]
        public void ShouldMap()
        {
            // given
            var id = int.Parse(<#= EntityName.ToLower() #>.ToNexusId().Identifier);

            // when
            var response = MdmService.Map<<#= EntityName #>>(id, "Endur");

            // then
            Assert.IsTrue(response.IsValid);
            Assert.AreEqual(<#= EntityName.ToLower() #>.Identifiers.First(i => i.SystemName == "Endur").Identifier, response.Message.Identifier);
        }

        [TestMethod]
        public void ShouldCrossMap()
        {
            // given
            var sourceIdentifier = <#= EntityName.ToLower() #>.Identifiers.First(i => i.SystemName == "Endur");

            // when
            var response = MdmService.CrossMap<<#= EntityName #>>(sourceIdentifier, "Trayport");

            // then
            Assert.IsTrue(response.IsValid);
            Assert.AreEqual(<#= EntityName.ToLower() #>.Identifiers.First(i => i.SystemName == "Trayport").Identifier, response.Message.Mappings[0].Identifier);
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
