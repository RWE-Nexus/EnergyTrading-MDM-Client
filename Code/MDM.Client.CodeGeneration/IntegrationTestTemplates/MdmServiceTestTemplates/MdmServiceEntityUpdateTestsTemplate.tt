<#+
// <copyright file="MdmServiceEntityRetrievalTestsTemplate.tt" company="RWE">
//  Copyright © RWE. All Rights Reserved.
// </copyright>

public class MdmServiceEntityUpdateTestsTemplate : CSharpTemplate
{
	public string EntityName { get; set;}

	public override string TransformText()
	{
		base.TransformText();
#>
namespace MDM.Client.IntegrationTests.<#= EntityName #>.MdmService
{
	using System.Configuration;
    using System.Linq;
    using System.Net;

    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using RWEST.Nexus.MDM.Contracts;

    [TestClass]
    public class MdmServiceEntityUpdateIntegrationTests : MdmServiceIntegrationTestBase
    {
        private <#= EntityName #> <#= EntityName.ToLower() #>;

        protected override void OnSetup()
        {
			ConfigurationManager.AppSettings["MdmCaching"] = false.ToString();

            base.OnSetup();

            <#= EntityName.ToLower() #> = <#= EntityName #>Data.PostBasicEntity();
        }
	
        [TestMethod]
        public void ShouldSucceedUpdateWhenETagMatches()
        {
            // given
            var id = int.Parse(<#= EntityName.ToLower() #>.ToNexusId().Identifier);

            // when
            var response = MdmService.Get<<#= EntityName #>>(id);
            var entity = response.Message;
            entity.Identifiers = new NexusIdList() {entity.Identifiers.SystemId()};

            // then
            response = MdmService.Update(id, entity, response.Tag);
            Assert.IsTrue(response.IsValid);
        }

        [TestMethod]
        public void ShouldFailUpdateWhenETagDiffers()
        {
            // given
            var id = int.Parse(<#= EntityName.ToLower() #>.ToNexusId().Identifier);

            // when
            var response = MdmService.Get<<#= EntityName #>>(id);

            // then
            response = MdmService.Update(id, response.Message, "\"999888777666555\"");
            Assert.IsFalse(response.IsValid);
            Assert.AreEqual(HttpStatusCode.PreconditionFailed, response.Code);
            Assert.AreEqual("Exception of type 'RWEST.Nexus.MDM.Services.VersionConflictException' was thrown.", response.Fault.Message);
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
